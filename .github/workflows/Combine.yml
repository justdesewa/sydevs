name: Build and Deploy SyDEVS

on:
  push:
  pull_request:
    branches:
      - Rasheedat/ci
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ macos-latest]
        compiler: [gcc-12, clang-14]
        vs_version: ['2019', '2022']
        configuration: ['Release', 'Debug']
        include:
          - os: ubuntu-latest
            compiler: gcc-12
            vs_version: ''
          - os: ubuntu-latest
            compiler: clang-14
            vs_version: ''
          - os: macos-latest
            compiler: ''
            vs_version: ''
          - os: windows-latest
            compiler: ''
            vs_version: '2019'
          - os: windows-latest
            compiler: ''
            vs_version: '2022'

    env:
      MY_VS_VERSION: ${{ matrix.vs_version }}
      CC: ${{ matrix.compiler }}
      CXX: ${{ matrix.compiler }}++

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    # Install dependencies for Linux
    - name: Install dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y software-properties-common
        if [[ "${{ matrix.compiler }}" == "gcc-12" ]]; then
          sudo apt-get install -y g++-12
          export CC=gcc-12
          export CXX=g++-12
        elif [[ "${{ matrix.compiler }}" == "clang-14" ]]; then
          sudo apt-get install -y clang-14 libc++-14-dev libc++abi-14-dev
          export CC=clang-14
          export CXX=clang++-14
        fi
        sudo apt-get install -y cmake

    # Install dependencies for Windows
    - name: Install Visual Studio Build Tools (Windows)
      if: runner.os == 'Windows'
      run: |
        if (-Not (Test-Path "$env:ProgramFiles(x86)\Microsoft Visual Studio\$env:MY_VS_VERSION\BuildTools")) {
          Write-Host "Installing Visual Studio Build Tools $env:MY_VS_VERSION"
          choco install visualstudio$env:MY_VS_VERSIONbuildtools --yes
        }
        vswhere -products * -requires Microsoft.Component.MSBuild -property installationPath

    - name: Set up MSBuild (Windows)
      if: runner.os == 'Windows'
      uses: microsoft/setup-msbuild@v1

    # Install dependencies for macOS
    - name: Install dependencies (macOS)
      if: runner.os == 'macos'
      run: |
        xcode-select --install || true
        cmake --version

    # Configure and Build
    - name: Configure with CMake
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.configuration }}

    - name: Build project
      run: |
        cd build
        make

    # Archive artifacts
    - name: Archive artifacts
      run: |
        mkdir -p artifacts/lib artifacts/include/sydevs/core artifacts/include/sydevs/systems artifacts/include/sydevs/time
        if [[ -d src/sydevs/core ]]; then
          cp src/sydevs/core/*.h artifacts/include/sydevs/core || true
        fi
        if [[ -d src/sydevs/systems ]]; then
          cp src/sydevs/systems/*.h artifacts/include/sydevs/systems || true
        fi
        if [[ -d src/sydevs/time ]]; then
          cp src/sydevs/time/*.h artifacts/include/sydevs/time || true
        fi
        zip -r artifacts.zip artifacts

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: artifacts.zip

  release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Deploy to GitHub Release
      run: |
        TAG_NAME=$(echo $GITHUB_REF | sed 's/refs\/tags\///')
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
        -X POST \
        -d '{"tag_name": "$TAG_NAME", "target_commitish": "main", "name": "Release $TAG_NAME", "body": "Release for version $TAG_NAME", "draft": false, "prerelease": false}' \
        https://api.github.com/repos/${{ github.repository }}/releases

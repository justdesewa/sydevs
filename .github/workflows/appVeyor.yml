name: Build and Deploy SyDEVS

on:
  push:
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    env:
      VS_VERSION: '2022'  # Visual Studio version

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3  # Latest version

    # Install Visual Studio 2022 Build Tools for Windows
    - name: Install Visual Studio Build Tools
      run: |
        # Install Visual Studio 2022 Build Tools if not already installed
        if (-Not (Test-Path "$env:ProgramFiles(x86)\Microsoft Visual Studio\2022\BuildTools")) {
          Write-Host "Installing Visual Studio Build Tools 2022"
          choco install visualstudio2022buildtools --yes
        }

    # Verify Visual Studio Installation
    - name: Verify Visual Studio Installation
      run: |
        # Check if Visual Studio 2022 is installed using vswhere
        vswhere -products * -requires Microsoft.Component.MSBuild -property installationPath

    # Set up Visual Studio (Windows only)
    - name: Set up Visual Studio
      uses: microsoft/setup-msbuild@v1  # Latest MSBuild setup for Windows

    # Create build directory
    - name: Create build directory
      run: mkdir build

    # Update CMakeLists.txt to remove unused variable warning
    - name: Update CMakeLists to remove unused variable warning
      run: |
        echo "Updating CMakeLists.txt to disable unused variable warning"
        (Get-Content CMakeLists.txt) -replace 'set\(CMAKE_CXX_FLAGS', 'set(CMAKE_CXX_FLAGS -Wno-unused-but-set-variable' | Set-Content CMakeLists.txt
        Get-Content CMakeLists.txt  # Optional: to verify the changes

    # Archive Artifacts
    - name: Archive Artifacts
      run: |
        # Create directories using PowerShell
        New-Item -ItemType Directory -Path artifacts/lib -Force
        New-Item -ItemType Directory -Path artifacts/include/sydevs/core -Force
        New-Item -ItemType Directory -Path artifacts/include/sydevs/systems -Force
        New-Item -ItemType Directory -Path artifacts/include/sydevs/time -Force

        # Copy header files if directories exist
        if (Test-Path src/sydevs/core) {
          Copy-Item src/sydevs/core/*.h -Destination artifacts/include/sydevs/core -Force
        }
        if (Test-Path src/sydevs/systems) {
          Copy-Item src/sydevs/systems/*.h -Destination artifacts/include/sydevs/systems -Force
        }
        if (Test-Path src/sydevs/time) {
          Copy-Item src/sydevs/time/*.h -Destination artifacts/include/sydevs/time -Force
        }

        # Compress artifacts into a zip file
        Compress-Archive -Path artifacts/* -DestinationPath artifacts.zip

    # Upload Artifacts
    - name: Upload Artifacts
      uses: actions/upload-artifact@v3  # Latest version for uploading artifacts
      with:
        name: artifact  # The name of the artifact
        path: artifacts.zip  # Path to the archived artifacts.zip

    # Deploy to Release
    - name: Deploy to Release
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        echo "Deploying Release $TAG_NAME"
        gh release create "$TAG_NAME" artifacts.zip --title "Release $TAG_NAME" --notes "Release for version $TAG_NAME"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

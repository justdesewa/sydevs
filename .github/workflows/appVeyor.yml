name: Build and Deploy SyDEVS

on:
  push:
  pull_request:
    branches:
      - Rasheedat/ci
 

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        vs_version: ['2019', '2022']
        configuration: ['Release', 'Debug']

    env:
      MY_VS_VERSION: ${{ matrix.vs_version }}  # Visual Studio version for matrix
      MY_VS_SHORT: ${{ matrix.vs_version == '2019' && 'VS2019' || 'VS2022' }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    # Install dependencies
    - name: Install CMake (Linux/Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake
        cmake --version

    - name: Install Visual Studio Build Tools (Windows)
      if: runner.os == 'Windows'
      run: |
        # Install Visual Studio Build Tools
        choco install visualstudio2019buildtools --yes
        choco install visualstudio2022buildtools --yes

    - name: Verify Visual Studio Installation (Windows)
      if: runner.os == 'Windows'
      run: |
        vswhere -products * -requires Microsoft.Component.MSBuild -property installationPath

    - name: Set up Visual Studio (Windows only)
      if: runner.os == 'Windows'
      uses: microsoft/setup-msbuild@v1

    # Install Xcode Command Line Tools (macOS)
    - name: Install Xcode Command Line Tools (macOS)
      if: runner.os == 'macos'
      run: |
        xcode-select --install || true

    - name: Verify CMake and Xcode (macOS)
      if: runner.os == 'macos'
      run: |
        cmake --version
        xcodebuild -version

    # Create build directory
    - name: Create build directory
      run: |
        mkdir -p build

    # Update CMakeLists.txt to disable unused variable warning
    - name: Update CMakeLists to disable unused variable warning
      run: |
        if [[ "$RUNNER_OS" == "macos" ]]; then
          sed -i '' '/set(CMAKE_CXX_FLAGS/ s/$/ -Wno-unused-but-set-variable/' CMakeLists.txt
        else
          sed -i '/set(CMAKE_CXX_FLAGS/ s/$/ -Wno-unused-but-set-variable/' CMakeLists.txt
        fi

    # Configure with CMake for Visual Studio
    - name: Configure with CMake for Visual Studio
      run: |
        cd build
        cmake -G "$MY_VS_VERSION" ..
      
    # Build the project using MSBuild
    - name: Build Project using MSBuild
      run: |
        cd build
        cmake --build . --config ${{ matrix.configuration }} --parallel

    # After Build: Archive and create artifacts
    - name: Archive Artifacts
      run: |
        mkdir -p artifacts/lib artifacts/include/sydevs/core artifacts/include/sydevs/systems artifacts/include/sydevs/time
        if [ -d src/sydevs/core ]; then
          cp src/sydevs/core/*.h artifacts/include/sydevs/core || true
        fi
        if [ -d src/sydevs/systems ]; then
          cp src/sydevs/systems/*.h artifacts/include/sydevs/systems || true
        fi
        if [ -d src/sydevs/time ]; then
          cp src/sydevs/time/*.h artifacts/include/sydevs/time || true
        fi
        cp build/$CONFIGURATION/SyDEVS*.lib artifacts/lib
        cp LICENSE.md artifacts

    - name: Create ZIP Archive
      run: |
        ARCHIVE_NAME="SyDEVS-${GITHUB_SHA}_Win64_${MY_VS_SHORT}_${{ matrix.configuration }}"
        zip -r $ARCHIVE_NAME.zip artifacts

    # Upload Artifacts
    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: SyDEVS-Artifacts
        path: SyDEVS-${GITHUB_SHA}_Win64_${MY_VS_SHORT}_${{ matrix.configuration }}.zip

    # Deploy to Release (for tag pushes only)
    - name: Deploy to Release
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        TAG_NAME=$(echo $GITHUB_REF | sed 's/refs\/tags\///')
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -X POST \
          -d '{"tag_name": "$TAG_NAME", "target_commitish": "main", "name": "Release $TAG_NAME", "body": "Release for version $TAG_NAME", "draft": false, "prerelease": false}' \
          https://api.github.com/repos/${{ github.repository }}/releases

name: Build and Deploy SyDEVS

on:
  push:
  pull_request:
    branches:
      - Rasheedat/ci

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            vs_version: '2017'
            configuration: 'Release'
          - os: ubuntu-latest
            vs_version: '2017'
            configuration: 'Debug'
          - os: windows-latest
            vs_version: '2017'
            configuration: 'Release'
          - os: windows-latest
            vs_version: '2017'
            configuration: 'Debug'
          - os: macos-latest
            vs_version: '2017'
            configuration: 'Release'
          - os: macos-latest
            vs_version: '2017'
            configuration: 'Debug'

    env:
      MY_VS_VERSION: ${{ matrix.vs_version }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Install CMake (Linux only)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y wget
        wget https://cmake.org/files/v3.22/cmake-3.22.1-linux-x86_64.sh
        chmod +x cmake-3.22.1-linux-x86_64.sh
        sudo ./cmake-3.22.1-linux-x86_64.sh --skip-license --prefix=/usr/local
        cmake --version

    - name: Set up Visual Studio (Windows only)
      if: runner.os == 'Windows'
      uses: microsoft/setup-msbuild@v1

    - name: Create build directory
      run: mkdir build

    - name: Configure CMake project
      run: |
        if [[ ${{ runner.os }} == 'macOS' ]]; then
          cmake -S . -B build -G "Xcode" -DCMAKE_BUILD_TYPE=${{ matrix.configuration }}
        else
          cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -G "Unix Makefiles"
        fi

    - name: Update Compiler Flags (Linux only)
      if: runner.os == 'Linux'
      run: |
        echo "set(CMAKE_CXX_FLAGS \"\${CMAKE_CXX_FLAGS} -Wno-logical-op -Wno-strict-null-sentinel\")" >> build_flags.cmake
        echo "set(CMAKE_C_FLAGS \"\${CMAKE_C_FLAGS} -Wno-logical-op -Wno-strict-null-sentinel\")" >> build_flags.cmake

    - name: Build the project
      run: |
        cmake --build build --config ${{ matrix.configuration }} --parallel --verbose

    - name: Archive Artifacts
      run: |
        mkdir -p artifacts/lib artifacts/include/sydevs/core artifacts/include/sydevs/systems artifacts/include/sydevs/time
        if [ -d src/sydevs/core ]; then
          cp src/sydevs/core/*.h artifacts/include/sydevs/core || true
        fi
        if [ -d src/sydevs/systems ]; then
          cp src/sydevs/systems/*.h artifacts/include/sydevs/systems || true
        fi
        if [ -d src/sydevs/time ]; then
          cp src/sydevs/time/*.h artifacts/include/sydevs/time || true
        fi
        zip -r artifacts.zip artifacts

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: artifacts.zip

    - name: Deploy to Release
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        TAG_NAME=$(echo $GITHUB_REF | sed 's/refs\/tags\///')
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
        -X POST \
        -d '{"tag_name": "$TAG_NAME", "target_commitish": "main", "name": "Release $TAG_NAME", "body": "Release for version $TAG_NAME", "draft": false, "prerelease": false}' \
        https://api.github.com/repos/${{ github.repository }}/releases

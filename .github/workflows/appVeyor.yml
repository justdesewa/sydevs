name: Build and Deploy SyDEVS

on:
  push:
    tags:
      - 'v1.*' # Trigger on version tag pushes
  pull_request:
    branches:
      - main # Trigger on PR to main branch

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        vs_version: ['2015', '2017']
        configuration: ['Release', 'Debug']
    
    env:
      MY_VS_VERSION: ${{ matrix.vs_version }}  # Visual Studio version for matrix

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3  # Latest version

    - name: Set up Visual Studio (Windows only)
      if: runner.os == 'Windows'
      uses: microsoft/setup-msbuild@v1  # Latest MSBuild setup for Windows

    - name: Set up CMake (Linux/MacOS)
      if: runner.os != 'Windows'
      run: |
        mkdir -p cmake-download
        curl -LO https://cmake.org/files/v3.22/cmake-3.22.1-linux-x86_64.sh
        bash cmake-3.22.1-linux-x86_64.sh --skip-license --prefix=/usr/local
        cmake --version

    - name: Create build directory
      run: mkdir build

    - name: Configure CMake project
      run: cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -G "Unix Makefiles"

    - name: Build the project
      run: cmake --build build --config ${{ matrix.configuration }} --parallel

    - name: Archive Artifacts
      run: |
        mkdir -p artifacts/lib artifacts/include/sydevs/core artifacts/include/sydevs/systems artifacts/include/sydevs/time
        if [ -d src/sydevs/core ]; then
          cp src/sydevs/core/*.h artifacts/include/sydevs/core || true
        fi
        if [ -d src/sydevs/systems ]; then
          cp src/sydevs/systems/*.h artifacts/include/sydevs/systems || true
        fi
        if [ -d src/sydevs/time ]; then
          cp src/sydevs/time/*.h artifacts/include/sydevs/time || true
        fi
        zip -r artifacts.zip artifacts

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3  # Latest version for uploading artifacts

    - name: Deploy to Release
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        TAG_NAME=$(echo $GITHUB_REF | sed 's/refs\/tags\///')
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
        -X POST \
        -d '{"tag_name": "$TAG_NAME", "target_commitish": "main", "name": "Release $TAG_NAME", "body": "Release for version $TAG_NAME", "draft": false, "prerelease": false}' \
        https://api.github.com/repos/${{ github.repository }}/releases

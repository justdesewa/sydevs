name: Build and Deploy SyDEVS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]  # Runs on both Ubuntu and Windows

    env:
      VS_VERSION: '2022'  # Visual Studio version for Windows

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3  # Latest version

    # Install dependencies (Ubuntu only)
    - name: Install dependencies on Ubuntu
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential

    # Install Visual Studio Build Tools for Windows (Windows only)
    - name: Install Visual Studio Build Tools on Windows
      if: runner.os == 'Windows'
      run: |
        if (-Not (Test-Path "$env:ProgramFiles(x86)\Microsoft Visual Studio\2022\BuildTools")) {
          Write-Host "Installing Visual Studio Build Tools 2022"
          choco install visualstudio2022buildtools --yes
        }

    # Verify Visual Studio Installation (Windows only)
    - name: Verify Visual Studio Installation on Windows
      if: runner.os == 'Windows'
      run: |
        vswhere -products * -requires Microsoft.Component.MSBuild -property installationPath

    # Set up Visual Studio (Windows only)
    - name: Set up Visual Studio on Windows
      if: runner.os == 'Windows'
      uses: microsoft/setup-msbuild@v1  # Latest MSBuild setup for Windows

    # Create build directory (Cross-platform)
    - name: Create directories
      run: |
        if ($env:RUNNER_OS -eq 'Linux') {
          mkdir -p artifacts/lib artifacts/include/sydevs/{core,systems,time}
        } elseif ($env:RUNNER_OS -eq 'Windows') {
          mkdir -Force artifacts/lib
          mkdir -Force artifacts/include/sydevs/core
          mkdir -Force artifacts/include/sydevs/systems
          mkdir -Force artifacts/include/sydevs/time
        }

    # Build the project
    - name: Build project
      run: |
        if ($env:RUNNER_OS -eq 'Linux') {
          cmake -G "Unix Makefiles" .
          make
        } elseif ($env:RUNNER_OS -eq 'Windows') {
          cmake -G "Visual Studio 2022" .
          msbuild SyDEVS.sln /p:Configuration=Release
        }

    # Archive Artifacts
    - name: Archive Artifacts
      run: |
        if ($env:RUNNER_OS -eq 'Linux') {
          tar -czvf artifacts.tar.gz artifacts
        } elseif ($env:RUNNER_OS -eq 'Windows') {
          Compress-Archive -Path artifacts/* -DestinationPath artifacts.zip
        }

    # Upload Artifacts
    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: artifact  # The name of the artifact
        path: artifacts.zip  # Path to the archived artifacts.zip (works for both Ubuntu and Windows)

    # Deploy to Release (if a tag is pushed)
    - name: Deploy to Release
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        echo "Deploying Release $TAG_NAME"
        gh release create "$TAG_NAME" artifacts.zip --title "Release $TAG_NAME" --notes "Release for version $TAG_NAME"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
